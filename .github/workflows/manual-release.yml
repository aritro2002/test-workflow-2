name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_mode:
        description: "Version selection mode"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - manual
      version_type:
        description: "Auto-bump type (only used if mode is 'auto')"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      manual_version:
        description: "Manual version (only used if mode is 'manual')"
        required: false
        type: string
      release_notes:
        description: "Release notes (optional)"
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Validate and process version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "📋 Current version: $CURRENT_VERSION"

          # Function to bump version
          bump_version() {
            local version=$1
            local type=$2
            
            IFS='.' read -ra VERSION_PARTS <<< "$version"
            local major=${VERSION_PARTS[0]}
            local minor=${VERSION_PARTS[1]}
            local patch=${VERSION_PARTS[2]}
            
            case $type in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac
            
            echo "$major.$minor.$patch"
          }

          # Determine version based on mode
          VERSION_MODE="${{ github.event.inputs.version_mode }}"

          if [ "$VERSION_MODE" = "auto" ]; then
            # Auto-bump version
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            NEW_VERSION=$(bump_version "$CURRENT_VERSION" "$VERSION_TYPE")
            echo "🔄 Auto-bumping $VERSION_TYPE version: $CURRENT_VERSION → $NEW_VERSION"
          else
            # Manual version
            NEW_VERSION="${{ github.event.inputs.manual_version }}"
            
            if [ -z "$NEW_VERSION" ]; then
              echo "❌ Manual version cannot be empty when mode is 'manual'"
              exit 1
            fi
            
            echo "✏️ Using manual version: $CURRENT_VERSION → $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version will be bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          echo "✅ Updated package.json to version $NEW_VERSION"

      - name: Commit version bump
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin master

      - name: Create and push tag
        id: tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION"

          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "✅ Created and pushed tag: $TAG_NAME"

      - name: Generate release notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"

          # Get commits since last version
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi

          # Prepare release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$NEW_VERSION"
          fi

          # Save release notes to file for multiline handling
          echo "$RELEASE_NOTES" > release_notes.md
          echo "✅ Generated release notes"

      - name: Create GitHub Release (Draft)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const tagName = '${{ steps.tag.outputs.tag_name }}';
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: releaseNotes,
              draft: true,
              prerelease: false
            });

            console.log(`✅ Created draft release: ${release.data.html_url}`);

            // Add a summary
            core.summary
              .addHeading('🚀 Release Created Successfully')
              .addTable([
                [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Tag', header: true}],
                ['${{ steps.version.outputs.current_version }}', newVersion, tagName]
              ])
              .addLink('View Draft Release', release.data.html_url)
              .write();

      - name: Cleanup
        run: |
          rm -f release_notes.md
