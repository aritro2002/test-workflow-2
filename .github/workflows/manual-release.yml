name: Manual Release

on:
  workflow_dispatch:
    inputs:
      base_tag:
        description: "Base tag to version bump from (leave empty for latest)"
        required: false
        type: string
      version_mode:
        description: "Version selection mode"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - manual
      version_type:
        description: "Auto-bump type (only used if mode is 'auto')"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      manual_version:
        description: "Manual version (only used if mode is 'manual')"
        required: false
        type: string
      release_notes:
        description: "Release notes (optional)"
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup base tag and get version
        id: setup
        run: |
          # Handle base tag selection
          BASE_TAG="${{ github.event.inputs.base_tag }}"

          if [ -n "$BASE_TAG" ]; then
            echo "🏷️ Using base tag: $BASE_TAG"
            # Checkout the specified tag
            git checkout "$BASE_TAG"
            # Get version from the tag
            BASE_VERSION=$(node -p "require('./package.json').version")
            echo "📋 Base version from tag $BASE_TAG: $BASE_VERSION"
          else
            echo "📋 Using latest commit as base"
            # Get latest tag if available
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LATEST_TAG" ]; then
              echo "🏷️ Latest tag found: $LATEST_TAG"
              git checkout "$LATEST_TAG"
              BASE_VERSION=$(node -p "require('./package.json').version")
              echo "📋 Base version from latest tag $LATEST_TAG: $BASE_VERSION"
            else
              echo "📋 No tags found, using current version"
              BASE_VERSION=$(node -p "require('./package.json').version")
            fi
          fi

          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "base_tag=${BASE_TAG:-$LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Validate and process version
        id: version
        run: |
          BASE_VERSION="${{ steps.setup.outputs.base_version }}"
          echo "current_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "📋 Base version: $BASE_VERSION"

          # Function to bump version
          bump_version() {
            local version=$1
            local type=$2
            
            IFS='.' read -ra VERSION_PARTS <<< "$version"
            local major=${VERSION_PARTS[0]}
            local minor=${VERSION_PARTS[1]}
            local patch=${VERSION_PARTS[2]}
            
            case $type in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac
            
            echo "$major.$minor.$patch"
          }

          # Determine version based on mode
          VERSION_MODE="${{ github.event.inputs.version_mode }}"

          if [ "$VERSION_MODE" = "auto" ]; then
            # Auto-bump version
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            NEW_VERSION=$(bump_version "$BASE_VERSION" "$VERSION_TYPE")
            echo "🔄 Auto-bumping $VERSION_TYPE version: $BASE_VERSION → $NEW_VERSION"
          else
            # Manual version
            NEW_VERSION="${{ github.event.inputs.manual_version }}"
            
            if [ -z "$NEW_VERSION" ]; then
              echo "❌ Manual version cannot be empty when mode is 'manual'"
              exit 1
            fi
            
            echo "✏️ Using manual version: $BASE_VERSION → $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version will be bumped from $BASE_VERSION to $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          echo "✅ Updated package.json to version $NEW_VERSION"

      - name: Create version bump branch and PR
        id: pr
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BASE_TAG="${{ steps.setup.outputs.base_tag }}"
          BRANCH_NAME="release/v$NEW_VERSION"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and switch to new branch from master
          git checkout master
          git checkout -b "$BRANCH_NAME"

          # Add and commit the version change
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION

          Base tag: ${BASE_TAG:-latest}
          Version bump: ${{ steps.version.outputs.current_version }} → $NEW_VERSION"

          # Push the branch
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "✅ Created branch: $BRANCH_NAME"

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const branchName = '${{ steps.pr.outputs.branch_name }}';
            const baseTag = '${{ steps.setup.outputs.base_tag }}';
            const baseVersion = '${{ steps.version.outputs.current_version }}';

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${newVersion}`,
              head: branchName,
              base: 'master',
              body: `## Version Bump: ${baseVersion} → ${newVersion}

            **Base Tag:** ${baseTag || 'latest'}
            **Version Mode:** ${{ github.event.inputs.version_mode }}
            **Bump Type:** ${{ github.event.inputs.version_type || 'manual' }}

            ### Changes
            - Updated package.json version to ${newVersion}

            ### Next Steps
            1. Review and merge this PR
            2. The release tag and draft release will be created automatically

            ---
            *This PR was created automatically by the Manual Release workflow*`
            });

            console.log(`✅ Created PR #${pr.data.number}: ${pr.data.html_url}`);

            // Store PR info for later steps
            core.setOutput('pr_number', pr.data.number);
            core.setOutput('pr_url', pr.data.html_url);

      - name: Create and push tag
        id: tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION"

          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "✅ Created and pushed tag: $TAG_NAME"

      - name: Generate release notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"

          # Get commits since last version
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi

          # Prepare release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$NEW_VERSION"
          fi

          # Save release notes to file for multiline handling
          echo "$RELEASE_NOTES" > release_notes.md
          echo "✅ Generated release notes"

      - name: Create GitHub Release (Draft)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const tagName = '${{ steps.tag.outputs.tag_name }}';
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${tagName}`,
              body: releaseNotes,
              draft: true,
              prerelease: false
            });

            console.log(`✅ Created draft release: ${release.data.html_url}`);

            // Add a summary
            const prUrl = '${{ steps.pr.outputs.pr_url }}';
            core.summary
              .addHeading('🚀 Release Process Initiated')
              .addTable([
                [{data: 'Base Version', header: true}, {data: 'New Version', header: true}, {data: 'Tag', header: true}, {data: 'Base Tag', header: true}],
                ['${{ steps.version.outputs.current_version }}', newVersion, tagName, '${{ steps.setup.outputs.base_tag || "latest" }}']
              ])
              .addHeading('📋 Next Steps')
              .addList([
                `Review and merge the version bump PR: ${prUrl}`,
                `Draft release created: ${release.data.html_url}`,
                'After merging PR, publish the draft release'
              ])
              .write();

      - name: Cleanup
        run: |
          rm -f release_notes.md
