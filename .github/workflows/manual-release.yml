name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_mode:
        description: "Version selection mode"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - manual
      version_type:
        description: "Auto-bump type (only used if mode is 'auto')"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      manual_version:
        description: "Manual version (only used if mode is 'manual')"
        required: false
        type: string
      release_notes:
        description: "Release notes (optional)"
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT || github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Validate and process version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Current version: $CURRENT_VERSION"

          # Function to bump version
          bump_version() {
            local version=$1
            local type=$2
            
            IFS='.' read -ra VERSION_PARTS <<< "$version"
            local major=${VERSION_PARTS[0]}
            local minor=${VERSION_PARTS[1]}
            local patch=${VERSION_PARTS[2]}
            
            case $type in
              "major")
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              "minor")
                minor=$((minor + 1))
                patch=0
                ;;
              "patch")
                patch=$((patch + 1))
                ;;
            esac
            
            echo "$major.$minor.$patch"
          }

          # Determine version based on mode
          VERSION_MODE="${{ github.event.inputs.version_mode }}"

          if [ "$VERSION_MODE" = "auto" ]; then
            # Auto-bump version
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            NEW_VERSION=$(bump_version "$CURRENT_VERSION" "$VERSION_TYPE")
            echo "üîÑ Auto-bumping $VERSION_TYPE version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          else
            # Manual version
            NEW_VERSION="${{ github.event.inputs.manual_version }}"
            
            if [ -z "$NEW_VERSION" ]; then
              echo "‚ùå Manual version cannot be empty when mode is 'manual'"
              exit 1
            fi
            
            echo "‚úèÔ∏è Using manual version: $CURRENT_VERSION ‚Üí $NEW_VERSION"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Version will be bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Update package.json version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

          echo "‚úÖ Updated package.json to version $NEW_VERSION"

      - name: Create version bump branch and commit
        id: version_bump
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH_NAME="release/bump-version-to-$NEW_VERSION"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if branch exists remotely and delete it
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "üóëÔ∏è Branch $BRANCH_NAME already exists remotely, deleting it"
            git push origin --delete "$BRANCH_NAME" || true
          fi

          # Check if branch exists locally and delete it
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "üóëÔ∏è Branch $BRANCH_NAME exists locally, deleting it"
            git branch -D "$BRANCH_NAME" || true
          fi

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin "$BRANCH_NAME"

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Created branch $BRANCH_NAME and committed version bump"

      - name: Create Pull Request (with fallback)
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const branchName = '${{ steps.version_bump.outputs.branch_name }}';
            const repoUrl = `https://github.com/${{ github.repository }}`;
            const prUrl = `${repoUrl}/compare/master...${branchName}?expand=1`;

            const prBody = `## Version Bump to ${newVersion}

            This PR bumps the version from ${{ steps.version.outputs.current_version }} to ${newVersion}.

            **Changes:**
            - Updated \`package.json\` version field

            This PR was automatically created by the manual release workflow.

            Please review and merge this PR to proceed with the release process.`;

            try {
              // Try to create PR automatically
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `chore: bump version to ${newVersion}`,
                head: branchName,
                base: 'master',
                body: prBody
              });

              console.log(`‚úÖ Successfully created PR automatically: ${pr.data.html_url}`);

              // Success summary
              core.summary
                .addHeading('üéâ Version Bump PR Created Successfully')
                .addTable([
                  [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Branch', header: true}],
                  ['${{ steps.version.outputs.current_version }}', newVersion, branchName]
                ])
                .addLink('View Pull Request', pr.data.html_url)
                .addRaw('<br><br>**Next Steps:** Review and merge the PR above, then manually create the tag and release.')
                .write();

            } catch (error) {
              console.log(`‚ö†Ô∏è Failed to create PR automatically: ${error.message}`);
              console.log(`üîó Create PR manually at: ${prUrl}`);

              // Fallback summary with manual instructions
              core.summary
                .addHeading('üìã Version Bump Branch Created')
                .addTable([
                  [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Branch', header: true}],
                  ['${{ steps.version.outputs.current_version }}', newVersion, branchName]
                ])
                .addHeading('‚ö†Ô∏è Automatic PR Creation Failed')
                .addRaw(`<p><strong>Reason:</strong> ${error.message}</p>`)
                .addHeading('üîó Create Pull Request Manually')
                .addRaw(`<p><strong>Branch pushed successfully!</strong> Please create the PR manually using the link below.</p>`)
                .addLink('Click here to create the PR', prUrl)
                .addHeading('üìù Suggested PR Details')
                .addRaw(`<p><strong>Title:</strong> <code>chore: bump version to ${newVersion}</code></p>`)
                .addRaw(`<p><strong>Description:</strong></p>`)
                .addCodeBlock(prBody, 'markdown')
                .addRaw('<br><br>**Next Steps:** Create and merge the PR above, then manually create the tag and release.')
                .write();
            }

      - name: Generate release notes for manual use
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"

          # Get commits since last version
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=10)
          fi

          # Prepare release notes
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"

          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v$NEW_VERSION"
          fi

          # Save release notes to file for display
          echo "$RELEASE_NOTES" > release_notes.md
          echo "‚úÖ Generated release notes for manual use"

      - name: Display next steps
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const newVersion = '${{ steps.version.outputs.new_version }}';
            const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

            // Add detailed next steps to summary
            core.summary
              .addHeading('üìã Version Bump PR Created - Next Steps')
              .addTable([
                [{data: 'Previous Version', header: true}, {data: 'New Version', header: true}, {data: 'Branch', header: true}],
                ['${{ steps.version.outputs.current_version }}', newVersion, '${{ steps.version_bump.outputs.branch_name }}']
              ])
              .addHeading('üîÑ Manual Steps Required')
              .addList([
                '1. Review and merge the version bump PR above',
                '2. After merging, create and push the release tag manually:',
                '3. Create a GitHub release using the tag and release notes below'
              ])
              .addHeading('üìù Commands to run after PR merge')
              .addCodeBlock(`git checkout master
              git pull origin master
              git tag -a v${newVersion} -m "Release v${newVersion}"
              git push origin v${newVersion}`, 'bash')
                            .addHeading('üìÑ Release Notes (copy for GitHub release)')
                            .addCodeBlock(releaseNotes, 'markdown')
                            .write();

      - name: Cleanup
        run: |
          rm -f release_notes.md
